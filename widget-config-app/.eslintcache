[{"C:\\Users\\John's PC\\Documents\\WeightedWidgetCounter\\widget-config-app\\src\\index.js":"1","C:\\Users\\John's PC\\Documents\\WeightedWidgetCounter\\widget-config-app\\src\\App.js":"2","C:\\Users\\John's PC\\Documents\\WeightedWidgetCounter\\widget-config-app\\src\\reportWebVitals.js":"3","C:\\Users\\John's PC\\Documents\\WeightedWidgetCounter\\widget-config-app\\src\\ConfigurationForm.js":"4","C:\\Users\\John's PC\\Documents\\WeightedWidgetCounter\\widget-config-app\\src\\TestWidget.js":"5","C:\\Users\\John's PC\\Documents\\WeightedWidgetCounter\\widget-config-app\\src\\GoalsFields.js":"6","C:\\Users\\John's PC\\Documents\\WeightedWidgetCounter\\widget-config-app\\src\\MainConfigurationFields.js":"7","C:\\Users\\John's PC\\Documents\\WeightedWidgetCounter\\widget-config-app\\src\\WeightedCounterWidget.js":"8","C:\\Users\\John's PC\\Documents\\WeightedWidgetCounter\\widget-config-app\\src\\TwitchAuth.js":"9"},{"size":500,"mtime":1637770431327,"results":"10","hashOfConfig":"11"},{"size":343,"mtime":1638211145938,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1637770431327,"results":"13","hashOfConfig":"11"},{"size":7612,"mtime":1638242146285,"results":"14","hashOfConfig":"11"},{"size":1591,"mtime":1637796448668,"results":"15","hashOfConfig":"11"},{"size":3498,"mtime":1637961296480,"results":"16","hashOfConfig":"11"},{"size":3895,"mtime":1638243026360,"results":"17","hashOfConfig":"11"},{"size":4803,"mtime":1637960815004,"results":"18","hashOfConfig":"11"},{"size":3883,"mtime":1638242570226,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ticamg",{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},"C:\\Users\\John's PC\\Documents\\WeightedWidgetCounter\\widget-config-app\\src\\index.js",[],"C:\\Users\\John's PC\\Documents\\WeightedWidgetCounter\\widget-config-app\\src\\App.js",["44"],"import logo from './logo.svg';\nimport './App.css';\nimport ConfigurationForm from './ConfigurationForm';\nimport ReactGA from 'react-ga';\nReactGA.initialize('UA-000000-01');\nReactGA.pageview(window.location.pathname);\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    \n      <ConfigurationForm />\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\John's PC\\Documents\\WeightedWidgetCounter\\widget-config-app\\src\\reportWebVitals.js",[],"C:\\Users\\John's PC\\Documents\\WeightedWidgetCounter\\widget-config-app\\src\\ConfigurationForm.js",["45"],"import {useState, useEffect} from 'react';\r\nimport React from 'react';\r\nimport TestWidget from './TestWidget';\r\nimport GoalsFields from './GoalsFields';\r\nimport MainConfigurationFields from './MainConfigurationFields';\r\nimport Grid from '@mui/material/Grid';\r\nimport Modal from '@mui/material/Modal';\r\nimport Button from '@mui/material/Button';\r\nimport TwitchAuth from './TwitchAuth';\r\n\r\nconst DEFAULT_CONFIG = {\r\n    currencySymbol: \"$\",\r\n    defaultText: \"Tips\",\r\n    goals: [],\r\n    weights: {\r\n        bits: 0.01,\r\n        tips: 1,\r\n        primeSub: 5,\r\n        tierOneSub: 5,\r\n        tierTwoSub: 10,\r\n        tierThreeSub: 25\r\n    },\r\n    override: 0\r\n}\r\n\r\nfunction buildConfig() {\r\n    return {\r\n        currencySymbol: document.getElementById(\"currency-symbol\").value,\r\n        defaultText: document.getElementById(\"default-text\").value,\r\n        goals: JSON.parse(document.getElementById(\"goal-hidden-input\").value),\r\n        weights: {\r\n            bits: parseFloat(document.getElementById(\"bits\").value),\r\n            tips: parseFloat(document.getElementById(\"tips\").value),\r\n            primeSub: parseFloat(document.getElementById(\"prime-sub\").value),\r\n            tierOneSub: parseFloat(document.getElementById(\"tier-one-sub\").value),\r\n            tierTwoSub: parseFloat(document.getElementById(\"tier-two-sub\").value),\r\n            tierThreeSub: parseFloat(document.getElementById(\"tier-three-sub\").value),\r\n        },\r\n        override: parseFloat(document.getElementById(\"override\").value)\r\n    }\r\n}\r\n\r\nfunction buildTextConfig() {\r\n    return {\r\n        currencySymbol: document.getElementById(\"currency-symbol\").value,\r\n        defaultText: document.getElementById(\"default-text\").value,\r\n        goals: JSON.parse(document.getElementById(\"goal-hidden-input\").value),\r\n        weights: {\r\n            bits: document.getElementById(\"bits\").value,\r\n            tips: document.getElementById(\"tips\").value,\r\n            primeSub: document.getElementById(\"prime-sub\").value,\r\n            tierOneSub: document.getElementById(\"tier-one-sub\").value,\r\n            tierTwoSub: document.getElementById(\"tier-two-sub\").value,\r\n            tierThreeSub: document.getElementById(\"tier-three-sub\").value,\r\n        },\r\n        override: document.getElementById(\"override\").value\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default function ConfigurationForm(props) {\r\n    const [config, setConfig] = useState(DEFAULT_CONFIG);\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [isLoaded, setIsLoaded] = useState(false)\r\n    function updateConfigElement(e){\r\n        let elementId = e.target.id;\r\n        console.log(e)\r\n        document.getElementById(elementId.substring(0, elementId.length-6)).value = e.target.value;\r\n        setConfig(buildTextConfig())\r\n    }\r\n    function updateGoals(goals){\r\n        document.getElementById(\"goal-hidden-input\").value = JSON.stringify(goals);\r\n        setConfig(buildTextConfig())\r\n    }\r\n    function getWidgetConfiguration(user) {\r\n        let body = {\r\n            user: user\r\n        }\r\n        setIsLoading(true)\r\n        fetch(\"https://api.fendull.com/get-widget-configuration\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(body)\r\n        }).then((result) => {\r\n            if (result.ok){\r\n                return result.json()\r\n            } else {\r\n                return DEFAULT_CONFIG;\r\n            }\r\n        }).then((jsonData) => {\r\n            setIsLoading(false)\r\n            setConfig(jsonData)\r\n            setIsLoaded(true)\r\n        })\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n        <form> \r\n            <input id=\"goal-hidden-input\" type=\"hidden\" name=\"goals\" value={JSON.stringify(config.goals)} />\r\n            <input id=\"default-text\" type=\"hidden\" name=\"defaultText\" value={config.defaultText} />\r\n            <input id=\"currency-symbol\" type=\"hidden\" name=\"currencySymbol\" value={config.currencySymbol} />\r\n            <input id=\"bits\" type=\"hidden\" name=\"bits\" value={config.weights.bits} />\r\n            <input id=\"tips\" type=\"hidden\" name=\"tips\" value={config.weights.tips} />\r\n            <input id=\"prime-sub\" type=\"hidden\" name=\"primeSub\" value={config.weights.primeSub} />\r\n            <input id=\"tier-one-sub\" type=\"hidden\" name=\"tierOneSub\" value={config.weights.tierOneSub} />\r\n            <input id=\"tier-two-sub\" type=\"hidden\" name=\"tierTwoSub\" value={config.weights.tierTwoSub} />\r\n            <input id=\"tier-three-sub\" type=\"hidden\" name=\"tierThreeSub\" value={config.weights.tierThreeSub} />\r\n            <input id=\"override\" type=\"hidden\" name=\"override\" value={config.override} />\r\n        </form>\r\n        <Grid container direction=\"column\">\r\n            <Grid item container id=\"nav\">\r\n                <Grid item xs={9}>\r\n                    <TwitchAuth>\r\n                        <ForceSignIn />\r\n                    </TwitchAuth>\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                    { !isLoading && <TwitchAuth>\r\n                        <UpdateButton updateConfig={getWidgetConfiguration} isLoaded={isLoaded} />\r\n                    </TwitchAuth> }\r\n                </Grid> \r\n            </Grid>\r\n            <Grid item container direction=\"row\" spacing={5} justifyContent=\"center\" alignItems=\"flex-start\">\r\n                <Grid item xs={5}>\r\n                    <MainConfigurationFields config={config} updateConfigElement={updateConfigElement}/>\r\n                </Grid>\r\n                <Grid item xs={5}>\r\n                    <TestWidget getConfig={buildConfig}/>\r\n                    <GoalsFields config={config} updateGoals={updateGoals}/>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item>\r\n            </Grid>\r\n        </Grid>\r\n        \r\n        \r\n        </React.Fragment>\r\n        \r\n    )\r\n}\r\n\r\nfunction UpdateButton(props) {\r\n    const [isError, setIsError] = useState(false);\r\n    const [isComplete, setIsComplete] = useState(false)\r\n    const updateConfig = function() {\r\n        setIsComplete(false)\r\n        let config = buildConfig();\r\n        const body = {\r\n            auth_token: props.authData.accessToken,\r\n            configuration: config\r\n        }\r\n        \r\n        fetch(\"https://api.fendull.com/set-widget-configuration\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(body)\r\n        }).then((result) => {\r\n            setIsComplete(true)\r\n            if (result.ok){\r\n                setIsError(false)\r\n            } else if (result.status === 400){\r\n                props.authData.reset();\r\n                setIsError(true);\r\n            }\r\n        })\r\n    }\r\n    if (props.authData.authorized) {\r\n        if (!props.isLoaded) {\r\n            props.updateConfig(props.authData.idToken.preferred_username.toLowerCase())\r\n        }\r\n        return (\r\n            <React.Fragment>\r\n                <Button variant=\"contained\" onClick={updateConfig}>Update</Button>\r\n                {\r\n                    isComplete && (isError ? \"Failed to update\" : \"Updated Successfully!\")\r\n                }\r\n            </React.Fragment>\r\n        )\r\n    } else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nfunction ForceSignIn(props) {\r\n    return (\r\n        <Modal open={!props.authData.authorized} style={{top: \"50%\", left: \"50%\", backgroundColor:\"white\", height: \"100vh\", width:\"100vw\"}}>\r\n            <React.Fragment>\r\n            <p> Please sign in using your Twitch account</p>\r\n            <Button variant=\"contained\" onClick={()=>{window.location.href = props.authData.authUrl }}>Twitch Sign In</Button>\r\n            </React.Fragment>\r\n        </Modal>\r\n    )\r\n}","C:\\Users\\John's PC\\Documents\\WeightedWidgetCounter\\widget-config-app\\src\\TestWidget.js",["46"],"import {useState, React, useEffect} from 'react';\r\nimport Grid from '@mui/material/Grid';\r\nimport WeightedCounterWidget from './WeightedCounterWidget';\r\nimport Button from '@mui/material/Button';\r\nimport background from './stream.png';\r\n\r\nlet weightedCounterWidget = null;\r\nexport default function TestWidget(props) {\r\n    const [isTest, setIsTest] = useState(true);\r\n    if (weightedCounterWidget !== null){\r\n        weightedCounterWidget.cleanUp();\r\n    }\r\n\r\n    const refresh = () => {\r\n        let conf = props.getConfig()\r\n        conf.test = isTest;\r\n        weightedCounterWidget.cleanUp();\r\n        weightedCounterWidget = new WeightedCounterWidget(conf);\r\n    }\r\n\r\n    useEffect(()=>{\r\n        let conf = props.getConfig()\r\n        conf.test = isTest;\r\n        weightedCounterWidget = new WeightedCounterWidget(conf);\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <Grid className=\"test-widget\" container direction=\"row\" justifyContent=\"center\" alignItems=\"center\">\r\n            <Grid item>\r\n            <div id=\"widget-container\" style={{ backgroundImage: `url(${background})` }}>\r\n                <div id=\"widget-root\"></div>\r\n            </div>\r\n            </Grid>\r\n            <Grid item container direction=\"column\" justifyContent=\"center\" alignItems=\"center\" spacing={3}>\r\n                <Grid item><Button variant=\"contained\" onClick={refresh}>Refresh</Button></Grid>\r\n                <Grid item><Button variant=\"contained\" onClick={()=>{setIsTest(!isTest); refresh();}}>{isTest ? \"Use Live Data\" : \"Use Random Data\"}</Button></Grid>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}","C:\\Users\\John's PC\\Documents\\WeightedWidgetCounter\\widget-config-app\\src\\GoalsFields.js",["47","48","49","50"],"import {useState, useCallback, useEffect, React} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport Grid from '@mui/material/Grid';\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport IconButton from \"@mui/material/IconButton\";\r\n\r\nconst validFloat = /^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$/;\r\n\r\nfunction Goal(props) {\r\n    return (\r\n        <ListItem className={props.idx % 2 == 0 ? \"list-item-even\": \"list-item-odd\"}>\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={8}>\r\n                    {props.description}\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                    {\"$\" + props.value.toString()}\r\n                </Grid>\r\n                <Grid item alignItems=\"stretch\" xs={1} style={{ display: \"flex\" }}>\r\n                    <IconButton onClick={props.removeItem}>\r\n                        <DeleteIcon />\r\n                    </IconButton>\r\n                </Grid>\r\n            </Grid>\r\n        </ListItem>\r\n    )\r\n}\r\n\r\nexport default function GoalsFields(props) {\r\n    const [newGoalName, setNewGoalName] = useState(\"\");\r\n    const [newGoalValue, setNewGoalValue] = useState(\"0\");\r\n\r\n    let addGoals = useCallback(() => {\r\n        props.config.goals.push({description: newGoalName, value: parseFloat(newGoalValue)})\r\n\r\n        props.updateGoals(props.config.goals)\r\n        setNewGoalName(\"\");\r\n        setNewGoalValue(0);\r\n    });\r\n    let removeGoal = useCallback(function(idx) {\r\n        let newGoals = props.config.goals.filter((value, index) => {return index !== idx});\r\n        props.updateGoals(newGoals);\r\n        \r\n    })\r\n\r\n    return (\r\n        <div id=\"goals-fields\">\r\n            <div id=\"new-goal\">\r\n                <Grid container>\r\n                    <Grid item>\r\n                        <TextField \r\n                            className=\"new-goal-input\"\r\n                            label=\"goal description\"\r\n                            value={newGoalName}\r\n                            onChange={(e)=>{setNewGoalName(e.target.value)}} />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <TextField\r\n                            error={!validFloat.test(newGoalValue)}\r\n                            helperText={validFloat.test(newGoalValue) ? \"\" : \"Must be a number\"}\r\n                            className=\"new-goal-input\"\r\n                            label=\"goal value\"\r\n                            value={newGoalValue}\r\n                            onChange={(e)=>{setNewGoalValue(e.target.value)}} />\r\n                    </Grid>\r\n                    <Grid item alignItems=\"stretch\" style={{ display: \"flex\" }}>\r\n                        <Button disabled={!validFloat.test(newGoalValue)} variant=\"contained\" onClick={addGoals}>\r\n                            Add Goal\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n            <List>\r\n                {props.config.goals.map((goal, idx) => {\r\n                    return (<Goal\r\n                    key={idx.toString() + goal.description + goal.value.toString()}\r\n                    description={goal.description}\r\n                    value={goal.value}\r\n                    idx={idx}\r\n                    removeItem={()=>{removeGoal(idx)}}/>)\r\n                })}\r\n            </List>\r\n        </div>\r\n    )\r\n}","C:\\Users\\John's PC\\Documents\\WeightedWidgetCounter\\widget-config-app\\src\\MainConfigurationFields.js",["51","52","53"],"C:\\Users\\John's PC\\Documents\\WeightedWidgetCounter\\widget-config-app\\src\\WeightedCounterWidget.js",["54","55","56"],"export default class WeightedCounterWidget {\r\n    constructor(opts) {\r\n        this.opts = opts;\r\n\r\n        if (opts.test) {\r\n            this.dataProvider = new TestDataProvider(this);\r\n        } else if (opts.testWithData) {\r\n            this.dataProvider = new TestWithDataDataProvider(this);\r\n            this.dataProvider.setData(opts.testWithData);\r\n        } else {\r\n            this.dataProvider = new WeightedCounterWidgetDataProviderImpl(this);\r\n        }\r\n\r\n        this.dataProvider.begin();\r\n    }\r\n    cleanUp() {\r\n        this.dataProvider.close();\r\n    }\r\n    render(data) {\r\n        \r\n        let currencySymbol = this.opts.currencySymbol;\r\n        let currentPoints = this.getCurrentPoints(data);\r\n        let nextGoal = this.getNextGoal(currentPoints);\r\n        let preText = this.opts.defaultText + \": \";\r\n        let postText = \"\";\r\n\r\n        if (nextGoal) {\r\n            preText = nextGoal.description + \": \";\r\n            postText = \" / \" + currencySymbol + nextGoal.value.toFixed(2);\r\n        }\r\n        let text = preText + currencySymbol + currentPoints.toFixed(2) + postText;\r\n        document.getElementById(\"widget-root\").innerHTML = text; \r\n    }\r\n\r\n    getCurrentPoints(data) {\r\n        if (data.counts && this.opts.weights) {\r\n            return data.counts.tierOneSub * this.opts.weights.tierOneSub\r\n            + data.counts.tierTwoSub * this.opts.weights.tierTwoSub\r\n            + data.counts.tierThreeSub * this.opts.weights.tierThreeSub\r\n            + data.counts.tips * this.opts.weights.tips\r\n            + data.counts.bits * this.opts.weights.bits\r\n        }\r\n        \r\n        return 0;\r\n    }\r\n\r\n    getNextGoal(currentPoints) {\r\n        if (!currentPoints && currentPoints !== 0){\r\n            console.log(\"No points\");\r\n            return null;\r\n        }\r\n\r\n        if (!this.opts.goals || this.opts.goals.length == 0) {\r\n            console.log(\"No goals\");\r\n            return null;\r\n        }\r\n\r\n        let goals = this.opts.goals;\r\n        let sortedGoals = goals.sort((goal, otherGoal) => {return goal.value < otherGoal.value})\r\n        \r\n        let i = 0;\r\n        while (i < goals.length) {\r\n            if (goals[i].value > currentPoints){\r\n                return goals[i];\r\n            }\r\n            i += 1;\r\n        }\r\n        return goals[-1];\r\n    }\r\n}\r\n\r\nclass WeightedCounterWidgetDataProvider {\r\n    constructor(widget) {\r\n        this.widget = widget;\r\n    }\r\n\r\n    begin() {\r\n        console.log(\"Starting data provider\");\r\n    }\r\n\r\n    close() {\r\n        console.log(\"Stopping data provider\");\r\n    }\r\n\r\n    reset() {\r\n        console.log(\"Resetting data provider\");\r\n    }\r\n}\r\n\r\nclass TestDataProvider extends WeightedCounterWidgetDataProvider{\r\n    constructor(widget) {\r\n        super(widget);\r\n        this.interval = null;\r\n    }\r\n\r\n    begin() {\r\n        const applyCallback = () => {\r\n            this.widget.render(this.randomData())\r\n        };\r\n\r\n        this.interval = setInterval(applyCallback, 3000);\r\n    }\r\n\r\n    close() {\r\n        try {\r\n            clearInterval(this.interval);\r\n        } catch (e) {\r\n            console.log(e)\r\n            console.log(\"Data Provider not running\")\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        this.close();\r\n        this.begin();\r\n    }\r\n\r\n    randomData() {\r\n        function getRandomInt(max) {\r\n            return Math.floor(Math.random() * max);\r\n        }\r\n        return {\r\n            counts: {\r\n                tierOneSub: getRandomInt(50),\r\n                tierTwoSub: getRandomInt(10),\r\n                tierThreeSub: getRandomInt(1),\r\n                tips: getRandomInt(100),\r\n                bits: getRandomInt(1000),\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass TestWithDataDataProvider extends WeightedCounterWidgetDataProvider{\r\n    constructor(widget) {\r\n        super(widget);\r\n        this.interval = null;\r\n        this.data = null;\r\n    }\r\n\r\n    begin() {\r\n        const applyCallback = () => {\r\n            this.widget.render(this.getData())\r\n        };\r\n\r\n        this.interval = setInterval(applyCallback, 3000);\r\n    }\r\n\r\n    close() {\r\n        try {\r\n            this.interval.clearInterval();\r\n        } catch (e) {\r\n            console.log(\"Data Provider not running\")\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        this.close();\r\n        this.begin();\r\n    }\r\n\r\n    setData(data) {\r\n        this.data = data;\r\n    } \r\n\r\n    getData() {\r\n        function getRandomInt(max) {\r\n            return Math.floor(Math.random() * max);\r\n        }\r\n        return {\r\n            counts: {\r\n                tierOneSub: 1,\r\n                tierTwoSub: 0,\r\n                tierThreeSub: 0,\r\n                tips: 0,\r\n                bits: 0,\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass WeightedCounterWidgetDataProviderImpl extends WeightedCounterWidgetDataProvider {\r\n\r\n}","C:\\Users\\John's PC\\Documents\\WeightedWidgetCounter\\widget-config-app\\src\\TwitchAuth.js",["57"],"import React, { useState, useEffect } from 'react'\r\n\r\nconst AUTH_URL_BASE = \"https://id.twitch.tv/oauth2/authorize\"\r\nconst USER_INFO_URL = 'https://id.twitch.tv/oauth2/userinfo'\r\nconst REDIRECT_URI = \"https://widget.fendull.com\";\r\nconst CLIENT_ID = \"r00l5bbti7hghk2rwaaq84p08dxh93\";\r\n\r\n\r\nfunction setCookie(cname, cvalue, expires) {\r\n    document.cookie = cname + \"=\" + cvalue + \";\" + expires.toString() + \";path=/\";\r\n}\r\n\r\nfunction parseJwt (token) {\r\n    var base64Url = token.split('.')[1];\r\n    var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n    var jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {\r\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n    }).join(''));\r\n\r\n    return JSON.parse(jsonPayload);\r\n}\r\n\r\nfunction getCookie(cname) {\r\n    var name = cname + \"=\";\r\n    var decodedCookie = decodeURIComponent(document.cookie);\r\n    var ca = decodedCookie.split(';');\r\n    for(var i = 0; i <ca.length; i++) {\r\n      var c = ca[i];\r\n      while (c.charAt(0) === ' ') {\r\n        c = c.substring(1);\r\n      }\r\n      if (c.indexOf(name) === 0) {\r\n        return c.substring(name.length, c.length);\r\n      }\r\n    }\r\n    return \"\";\r\n}\r\n\r\n\r\nfunction delete_cookie( name, path, domain ) {\r\n    if( getCookie( name ) ) {\r\n      document.cookie = name + \"=\" +\r\n        ((path) ? \";path=\"+path:\"\")+\r\n        ((domain)?\";domain=\"+domain:\"\") +\r\n        \";expires=Thu, 01 Jan 1970 00:00:01 GMT\";\r\n    }\r\n  }\r\n\r\nexport default function TwitchAuth(props) {\r\n    const [authorized, setAuthorized] = useState(false);\r\n    const [idToken, setIdToken] = useState(null);\r\n    const [accessToken, setAccessToken] = useState(null);\r\n    const [idToken64, setIdToken64] = useState(null)\r\n\r\n    function reset(){\r\n        setAuthorized(false);\r\n        delete_cookie(\"access_token\", \"/\", \"widget.fendull.com\")\r\n        delete_cookie(\"id_token\", \"/\", \"widget.fendull.com\")\r\n    }\r\n    function checkCookies(){\r\n        var access_token = getCookie('access_token');\r\n        if (access_token === ''){\r\n            return\r\n        } else {\r\n            setAccessToken(access_token)\r\n            setIdToken64(getCookie('id_token'))\r\n            setIdToken(parseJwt(getCookie('id_token')))\r\n            setAuthorized(true)\r\n        }\r\n    }\r\n    function checkURL(){\r\n        if (window.location.hash.length > 0){\r\n            var url = new URLSearchParams('?' + window.location.hash.substr(1));\r\n            var access_token = url.get('access_token');\r\n            if (access_token !== '') {\r\n                \r\n                var id_token = url.get('id_token');\r\n                var id_token_object = parseJwt(id_token);\r\n                \r\n                setIdToken(id_token_object)\r\n                setIdToken64(id_token)\r\n                setCookie('id_token', id_token, id_token_object.exp)\r\n                setCookie(\"access_token\", access_token, id_token_object.exp)\r\n                setAccessToken(access_token);\r\n                setAuthorized(true)\r\n            } else {\r\n                checkCookies();\r\n            }\r\n        } else {\r\n            checkCookies();\r\n        }  \r\n    }\r\n\r\n    useEffect(()=>{\r\n        checkURL()\r\n    }, [])\r\n    \r\n    function buildURL(){\r\n        return encodeURI(`${AUTH_URL_BASE}?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&scope=openid&response_type=token+id_token&claims={\"user_info\":{\"preferred_username\":null,\"picture\":null}}`)\r\n    }\r\n\r\n    const AUTH_URL = buildURL();\r\n    const authData = {authUrl: AUTH_URL, authorized: authorized, accessToken: accessToken, idToken: idToken, idToken64: idToken64, userInfoUrl: USER_INFO_URL, reset: reset};\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            {React.Children.toArray(props.children).map((child) =>{\r\n                return React.cloneElement(child, {authData: authData})\r\n            })}\r\n        </React.Fragment>\r\n    )\r\n}",{"ruleId":"58","severity":1,"message":"59","line":1,"column":8,"nodeType":"60","messageId":"61","endLine":1,"endColumn":12},{"ruleId":"58","severity":1,"message":"62","line":1,"column":19,"nodeType":"60","messageId":"61","endLine":1,"endColumn":28},{"ruleId":"63","severity":1,"message":"64","line":25,"column":8,"nodeType":"65","endLine":25,"endColumn":10,"suggestions":"66"},{"ruleId":"58","severity":1,"message":"62","line":1,"column":32,"nodeType":"60","messageId":"61","endLine":1,"endColumn":41},{"ruleId":"67","severity":1,"message":"68","line":14,"column":44,"nodeType":"69","messageId":"70","endLine":14,"endColumn":46},{"ruleId":"63","severity":1,"message":"71","line":36,"column":20,"nodeType":"60","endLine":36,"endColumn":31},{"ruleId":"63","severity":1,"message":"71","line":43,"column":22,"nodeType":"60","endLine":43,"endColumn":33},{"ruleId":"58","severity":1,"message":"72","line":1,"column":9,"nodeType":"60","messageId":"61","endLine":1,"endColumn":17},{"ruleId":"58","severity":1,"message":"73","line":1,"column":19,"nodeType":"60","messageId":"61","endLine":1,"endColumn":30},{"ruleId":"58","severity":1,"message":"62","line":1,"column":32,"nodeType":"60","messageId":"61","endLine":1,"endColumn":41},{"ruleId":"67","severity":1,"message":"68","line":53,"column":56,"nodeType":"69","messageId":"70","endLine":53,"endColumn":58},{"ruleId":"58","severity":1,"message":"74","line":59,"column":13,"nodeType":"60","messageId":"61","endLine":59,"endColumn":24},{"ruleId":"58","severity":1,"message":"75","line":167,"column":18,"nodeType":"60","messageId":"61","endLine":167,"endColumn":30},{"ruleId":"63","severity":1,"message":"76","line":96,"column":8,"nodeType":"65","endLine":96,"endColumn":10,"suggestions":"77"},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'isTest' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["78"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","'useState' is defined but never used.","'useCallback' is defined but never used.","'sortedGoals' is assigned a value but never used.","'getRandomInt' is defined but never used.","React Hook useEffect has a missing dependency: 'checkURL'. Either include it or remove the dependency array.",["79"],{"desc":"80","fix":"81"},{"desc":"82","fix":"83"},"Update the dependencies array to be: [isTest, props]",{"range":"84","text":"85"},"Update the dependencies array to be: [checkURL]",{"range":"86","text":"87"},[835,837],"[isTest, props]",[3185,3187],"[checkURL]"]